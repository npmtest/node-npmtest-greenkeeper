{"/home/travis/build/npmtest/node-npmtest-greenkeeper/test.js":"/* istanbul instrument in package npmtest_greenkeeper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/lib.npmtest_greenkeeper.js":"/* istanbul instrument in package npmtest_greenkeeper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_greenkeeper = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_greenkeeper = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-greenkeeper && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_greenkeeper */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_greenkeeper\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_greenkeeper.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_greenkeeper.rollup.js'] =\n            local.assetsDict['/assets.npmtest_greenkeeper.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_greenkeeper.__dirname + '/lib.npmtest_greenkeeper.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/index.js":"#!/usr/bin/env node\n\nvar emoji = require('node-emoji')\nvar hideSecrets = require('hide-secrets')\nvar log = require('npmlog')\nvar isURL = require('valid-url').isWebUri\n\nvar pkg = require('../package.json')\nvar story = require('./lib/story')\nvar commands = require('./commands')\n\nvar flags = require('@greenkeeper/flags')\n\nif (require.main === module) {\n  require('set-blocking')(true)\n  greenkeeper()\n} else {\n  module.exports = greenkeeper\n}\n\nfunction greenkeeper () {\n  if (pkg.version !== '0.0.0-placeholder') require('update-notifier')({pkg: pkg}).notify()\n\n  log.levels.http = 1500\n\n  log.level = flags.loglevel || 'info'\n  log.headingStyle = {fg: 'white'}\n  log.heading = process.platform === 'darwin' ? emoji.get('palm_tree') + ' ' : ''\n\n  log.verbose('cli', 'arguments', hideSecrets(flags))\n\n  if (flags.version) {\n    console.log(pkg.version || 'development')\n    process.exit(0)\n  }\n\n  var command = commands.all[((flags.argv.remain || []).shift() || '').toLowerCase()]\n\n  if (flags.help || !command) {\n    process.stdout.write(story.usage())\n    process.exit(0)\n  }\n\n  if (flags.force) log.warn('cli', 'using --force')\n\n  if (!flags.force && command !== 'config' && !isURL(flags.api)) {\n    log.error('cli', 'API endpoint is not a valid URL.', flags.api)\n    process.exit(1)\n  }\n\n  if (flags.api === 'https://api.greenkeeper.io/' && (flags.integration_beta_banner || 0) < 10) {\n    var boxen = require('boxen')\n    var chalk = require('chalk')\n    console.error(boxen('Check out our all new GitHub Integration: ' + chalk.yellow('https://git.io/uptodate'), {padding: 1, borderStyle: 'double', borderColor: 'green'}))\n    flags._rc.set('integration_beta_banner', (flags.integration_beta_banner || 0) + 1)\n  }\n\n  process.on('exit', function (code) {\n    if (code !== 2) return\n\n    var chalk = require('chalk')\n    log.error('unknown', 'Uhm, this was an unexpected error. Please try again.')\n    log.error('unknown', 'If this keeps reappearing – please let us know ' + chalk.yellow('greenkeeper support'))\n  })\n\n  require('./' + command)(flags, pkg)\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/lib/story.js":"var fs = require('fs')\nvar join = require('path').join\n\nvar chalk = require('chalk')\nvar md = require('cli-md')\nvar emoji = require('node-emoji')\n\nvar logo = require('./logo')\n\nvar ourmoji = (process.platform === 'darwin' ? '\\n' + emoji.get('palm_tree') + ' ' : '')\n\nmodule.exports = {\n  usage: function () {\n    return md(getReadme(1) + ourmoji)\n  },\n\n  start: function () {\n    logo()\n    return md(getReadme(0) + ourmoji)\n  },\n\n  disable: {\n    error_login_first: 'Please log in first: ' + chalk.yellow('greenkeeper login'),\n    repo_info: function (slug) {\n      return 'The repository slug is: ' + slug\n    },\n    error_no_data: 'API error',\n    error_no_change: function (slug) {\n      return slug + ' is already disabled\\nIf this repository is inside an organization, somebody other than you may have done this'\n    },\n    disabled: function (slug) {\n      return slug + ' disabled'\n    }\n  },\n\n  enable: {\n    error_login_first: 'Please log in first: ' + chalk.yellow('greenkeeper login'),\n    repo_info: function (slug) {\n      return 'The repository slug is: ' + slug\n    },\n    error_no_data: 'API error',\n    error_no_change: function (slug) {\n      return slug + ' is already enabled\\nIf this repository is inside an organization, somebody other than you may have done this'\n    },\n    enabled: function (slug) {\n      return slug + ' enabled'\n    },\n    fail: function () {\n      return md(getReadme(2))\n    }\n  },\n\n  info: {\n    error_login_first: 'Please log in first: ' + chalk.yellow('greenkeeper login'),\n    data: function (data) {\n      return data\n    }\n  },\n\n  login: {\n    error_already_logged_in: 'You’re already logged in. Use --force to continue.\\nIf you’re using private repositories use both --force and --private.',\n    request_failed: 'Request failed',\n    login_failed: 'Login failed'\n  },\n\n  logout: {\n    error_already_logged_out: 'You’re already logged out',\n    logged_out: 'Logged out' + ourmoji\n  },\n\n  'organization-access': [\n    'Opening GitHub application settings in browser',\n    'Grant or revoke access to individual organizations there',\n    'After granting access for a new organization run ' + chalk.yellow('greenkeeper sync')\n  ],\n\n  sync: {\n    error_login_first: 'Please log in first: ' + chalk.yellow('greenkeeper login')\n  },\n\n  whoami: {\n    name: function (data) {\n      function format (plan) {\n        if (plan === 'free') return chalk.dim(plan)\n\n        return chalk.green(plan)\n      }\n\n      return 'You’re currently logged in as ' + chalk.bold(data.name) +\n        (data.plan ? ' (' + format(data.plan) + ')' : '') + '.' +\n        (data.organizations.length\n          ? '\\nGreenkeeper can access these organizations:\\n\\n' + data.organizations\n          .sort(function (a, b) {\n            if (a.paying && !b.paying) return -1\n            if (!a.paying && b.paying) return 1\n            if (a.paying && b.paying) return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1\n\n            if (a.plan !== 'free' && b.plan === 'free') return -1\n            if (a.plan === 'free' && b.plan !== 'free') return 1\n\n            return a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1\n          })\n          .map(function (org) {\n            return '    ' + chalk.bold(org.name) + (org.plan ? ' ' + format(org.plan) +\n              (org.paying ? ', ' + chalk.underline('paid by you') : '') : '')\n          }).join('\\n')\n          : ''\n        )\n    }\n  }\n\n}\n\nfunction getReadme (index) {\n  var content = fs.readFileSync(join(__dirname, '../../README.md'), 'utf8')\n\n  if (typeof index !== 'number') return content\n  return content.split('<!-- section /-->')[index]\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/lib/logo.js":"var chalk = require('chalk')\n\nmodule.exports = function () {\n  console.error(chalk.green([\n    '                        oooo',\n    '                        `888',\n    '             .ooooooooo  888  ooooo',\n    \"            8888' `8888  888 .88P'\",\n    '            8888   8888  8888888.       g r e e n k e e p e r . i o',\n    \"            `888bod88P'  888 `888b.\",\n    '             `Yooooooo. o888o o8888o',\n    '                  `Y88b',\n    '            d88P   d888',\n    \"            `Y8888888P'\",\n    '\\n'\n  ].join('\\n')))\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/commands.js":"var _ = require('lodash')\nvar abbrev = require('abbrev')\n\nvar exports = module.exports = [\n  'login',\n  'logout',\n  'enable',\n  'disable',\n  'info',\n  'sync',\n  'whoami',\n  'support',\n  'evilhackerdude',\n  'lewis',\n  'upgrade',\n  'start',\n  'list',\n  'organization-access',\n  'config',\n  'npm-access',\n  'npm-verify',\n  'postpublish',\n  'faq',\n  'web-app',\n  'signup'\n].sort()\n\nexports.secrets = [\n  'evilhackerdude',\n  'lewis'\n]\n\nexports.aliases = {\n  ls: 'list',\n  downgrade: 'support',\n  cancel: 'support',\n  unsubscribe: 'support',\n  pay: 'upgrade',\n  buy: 'upgrade',\n  subscribe: 'upgrade',\n  ehd: 'evilhackerdude',\n  chat: 'support',\n  signin: 'login',\n  signout: 'logout',\n  status: 'info',\n  init: 'enable',\n  on: 'enable',\n  off: 'disable',\n  access: 'organization-access',\n  'organisation-access': 'organization-access',\n  'org-access': 'organization-access'\n}\n\nexports.all = _.mapValues(\n  abbrev(exports.concat(Object.keys(exports.aliases))),\n  function (cmd) {\n    return exports.aliases[cmd] || cmd\n  }\n)\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/config.js":"var abbrev = require('abbrev')\nvar chalk = require('chalk')\nvar log = require('npmlog')\n\nvar rc = require('@greenkeeper/flags')._rc\n\nvar aliases = abbrev(['get', 'set', 'delete', 'list', 'path'])\n\nmodule.exports = function (flags) {\n  var commands = flags.argv.remain\n  var command = commands.shift()\n\n  switch (aliases[command]) {\n    case 'get':\n      return get(commands)\n    case 'set':\n      return set(commands)\n    case 'delete':\n      return del(commands)\n    case 'list':\n      return list(commands)\n    case 'path':\n      return console.log(rc.getPath())\n    default:\n      log.info('config', rc.getPath())\n      log.error('config', [\n        'Usage:',\n        chalk.yellow('greenkeeper config set <key> <value>'),\n        chalk.yellow('greenkeeper config get [<key>]'),\n        chalk.yellow('greenkeeper config delete <key>'),\n        chalk.yellow('greenkeeper config list')\n      ].join('\\n'))\n  }\n}\n\nfunction get (commands) {\n  if (!commands.length) return list()\n\n  if (commands.length !== 1) return log.error('config', 'Usage: ' + chalk.yellow('greenkeeper config get [<key>]'))\n\n  console.log(rc.get(commands[0]))\n}\n\nfunction set (commands) {\n  if (commands[1] == null) commands[1] = true\n\n  if (commands.length !== 2) return log.error('config', 'Usage: ' + chalk.yellow('greenkeeper config set <key> <value>'))\n\n  rc.set.apply(null, commands)\n}\n\nfunction del (commands) {\n  if (commands.length !== 1) return log.error('config', 'Usage: ' + chalk.yellow('greenkeeper config delete <key>'))\n\n  rc.unset(commands[0])\n}\n\nfunction list () {\n  var config = rc.get()\n  Object.keys(config).sort().forEach(function (key) {\n    console.log(chalk.bold(key), config[key])\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/disable.js":"var chalk = require('chalk')\nvar log = require('npmlog')\nvar request = require('request')\n\nvar story = require('./lib/story').disable\n\nmodule.exports = function (flags) {\n  log.verbose('disable', 'Starting command')\n\n  if (!flags.token) {\n    log.error('disable', story.error_login_first)\n    process.exit(1)\n  }\n\n  if (flags.slug) return disableCommand(null, flags.slug)\n\n  require('github-slug')(process.cwd(), disableCommand)\n\n  function disableCommand (err, slug) {\n    if (err || !slug) {\n      log.error('disable', 'Couldn\\'t find a GitHub remote \"origin\" in this folder.\\nTry passing the slug explicitly ' + chalk.yellow('greenkeeper disable --slug <user>/<repository>'))\n      process.exit(1)\n    }\n\n    log.info('disable', story.repo_info(slug))\n\n    log.http('disable', 'Sending request')\n    request({\n      method: 'DELETE',\n      url: flags.api + 'packages',\n      json: true,\n      headers: {\n        Authorization: 'Bearer ' + flags.token\n      },\n      body: {slug: slug}\n    }, function (err, res, data) {\n      if (err) {\n        log.error('disable', err.message)\n        process.exit(2)\n      }\n\n      if (!data) {\n        log.error('disable', story.error_no_data)\n        process.exit(2)\n      }\n\n      if (data.noChange) {\n        return log.error('disable', story.error_no_change(slug)) // TODO: We might not need this\n      }\n\n      if (data.ok) {\n        return console.log(story.disabled(slug))\n      }\n\n      log.error('disable', res.statusMessage + (res.body.message ? ': ' + res.body.message : ''))\n      process.exit(2)\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/enable.js":"var fs = require('fs')\nvar path = require('path')\nvar qs = require('querystring')\n\nvar chalk = require('chalk')\nvar log = require('npmlog')\nvar open = require('opener')\nvar request = require('request')\nvar _ = require('lodash')\nvar yaml = require('js-yaml')\n\nvar story = require('./lib/story').enable\nvar sync = require('./lib/sync')\nvar postpublish = require('./postpublish')\n\nmodule.exports = function (flags) {\n  log.verbose('enable', 'Starting command')\n\n  if (!flags.token) {\n    log.error('enable', story.error_login_first)\n    process.exit(1)\n  }\n\n  if (flags.slug) return enableCommand(null, flags.slug)\n\n  require('github-slug')(process.cwd(), enableCommand)\n\n  function enableCommand (err, slug) {\n    if (err || !slug) {\n      log.error('enable', 'Couldn’t find a GitHub remote \"origin\" in this folder.\\nTry passing the slug explicitly ' + chalk.yellow('greenkeeper enable --slug <user>/<repository>'))\n      process.exit(1)\n    }\n\n    var pkg = {}\n    if (!flags.slug) {\n      try {\n        pkg = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'package.json')))\n      } catch (e) {\n        log.warn('enable', 'No package.json present, you won’t receive pull requests')\n      }\n\n      checkTravisyml(pkg)\n    }\n    var scoped = _.get(pkg, 'name[0]') === '@'\n\n    log.info('enable', 'The GitHub slug is:', slug)\n\n    enable(false)\n\n    function enable (isSynced) {\n      log.http('enable', 'Sending request')\n      request({\n        method: 'POST',\n        url: flags.api + 'packages',\n        json: true,\n        headers: {\n          Authorization: 'Bearer ' + flags.token\n        },\n        body: {slug: slug, manual_webhooks: flags.admin === false}\n      }, function (err, res, data) {\n        if (err) {\n          log.error('enable', err.message)\n          process.exit(2)\n        }\n\n        if (!data) {\n          return log.error('enable', story.error_no_data)\n        }\n\n        if (data.noChange) {\n          return log.error('enable', story.error_no_change(slug)) // TODO: We might not need this\n        }\n\n        if (data.ok) {\n          console.log(story.enabled(slug))\n\n          if (data.webhooks_secret) {\n            var url = 'https://greenkeeper.io/manual-webhooks.html?' + qs.encode({\n              slug: slug,\n              secret: data.webhooks_secret\n            })\n            open(url, function (err, stdout, stderr) {\n              if (err) {\n                console.log('Get webhooks setup instructions at this URL:', url)\n              }\n            })\n          }\n\n          if (!scoped || flags.slug || flags.postpublish === false) process.exit()\n\n          log.info('enable', 'This is a scoped package.')\n          log.info('enable', 'Installing greenkeeper-postpublish module to automatically announce new versions.')\n\n          return postpublish(flags)\n        }\n\n        if (data.statusCode === 403) {\n          log.error('enable', 'Admin access is required to enable a repository.')\n          log.error('enable', 'Please ask an admin on your team to enable Greenkeeper.')\n          process.exit(1)\n        }\n\n        if (data.statusCode !== 400) {\n          log.error('enable', res.statusMessage + (res.body.message ? ': ' + res.body.message : ''))\n          process.exit(2)\n        }\n\n        if (isSynced) exitWithError(slug)\n\n        log.verbose('enable', 'Repository not found. Starting a sync.')\n        log.info('enable', 'Synchronizing your repositories. This might take a while.')\n        sync(flags, function (err, repos) {\n          if (err) {\n            log.error('enable', 'Synchronizing the repositories was not possible.')\n            exitWithError(slug)\n          }\n          if (_.includes(repos, slug)) {\n            log.verbose('enable', 'Repository found after sync. Trying to enable again.')\n            return enable(true)\n          }\n          log.verbose('enable', 'Repository not found after sync.')\n          exitWithError(slug)\n        })\n      })\n    }\n  }\n}\n\nfunction checkTravisyml (pkg) {\n  try {\n    var travisyml = yaml.safeLoad(fs.readFileSync(path.join(process.cwd(), '.travis.yml')))\n    var onlyBranches = _.get(travisyml, 'branches.only')\n    if (!onlyBranches) return\n\n    var branchPrefix = _.get(pkg, 'greenkeeper.branchPrefix', 'greenkeeper-')\n\n    var greenkeeperRule = onlyBranches.some(function (branch) {\n      return _.includes(branch, branchPrefix.slice(0, -1))\n    })\n    if (greenkeeperRule) return\n\n    log.warn('enable', 'Your .travis.yml is configured to only run for specific branches.')\n    log.warn('enable', 'For Greenkeeper to work you need to whitelist the Greenkeeper branches.')\n    log.warn('enable', 'Add this rule to ' + chalk.yellow('branches.only') + ' in your .travis.yml:')\n    log.warn('enable', chalk.yellow('   - /^' + branchPrefix + '.*$/'))\n  } catch (e) {\n    // ignore missing or malformed yml\n  }\n}\n\nfunction exitWithError (slug) {\n  log.error('enable', 'Couldn’t enable a repository with slug ' + chalk.yellow(slug) + '.')\n  console.log(story.fail())\n  process.exit(1)\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/lib/sync.js":"var spinner = require('char-spinner')\nvar request = require('request')\n\nmodule.exports = function (opts, callback) {\n  var spin = spinner()\n  request({\n    method: 'POST',\n    url: opts.api + 'sync',\n    json: true,\n    headers: {\n      Authorization: 'Bearer ' + opts.token\n    }\n  }, function (err, res, data) {\n    clearInterval(spin)\n    if (err) return callback(err)\n\n    if (!data.repos) {\n      var errorMessage = res.statusMessage\n      if (res.body.message) errorMessage += ': ' + res.body.message\n      return callback(new Error(errorMessage))\n    }\n\n    callback(null, data.repos)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/postpublish.js":"var exec = require('child_process').exec\nvar fs = require('fs')\nvar path = require('path')\n\nvar jsonPreserveIndent = require('json-preserve-indent')\nvar log = require('npmlog')\nvar spinner = require('char-spinner')\n\nmodule.exports = function (flags) {\n  var pkgPath = path.join(process.cwd(), 'package.json')\n  var pkgFile = fs.readFileSync(pkgPath)\n  var pkg\n  try {\n    pkg = jsonPreserveIndent(pkgFile)\n  } catch (e) {\n    log.error('postpublish', 'Could not parse package.json')\n    process.exit(1)\n  }\n\n  if (pkg.get('name[0]') !== '@') log.warn('postpublish', 'This is not a scoped package. \"greenkeeper-postpublish\" should not be required.')\n\n  if (pkg.get('devDependencies.greenkeeper-postpublish')) {\n    log.info('postpublish', 'greenkeeper-postpublish is already installed')\n    process.exit()\n  }\n\n  if (pkg.get('scripts.postpublish')) {\n    log.error('postpublish', 'There is already a postpublish script present', '\"postpublish\": \"' + pkg.scripts.postpublish + '\"')\n    process.exit(1)\n  }\n\n  pkg.set('scripts.postpublish', 'greenkeeper-postpublish')\n\n  fs.writeFileSync(pkgPath, pkg.format())\n\n  log.verbose('postpublish', 'Updated the package.json')\n\n  log.info('postpublish', 'Installing greenkeeper-postpublish')\n  var spin = spinner()\n  exec('npm install greenkeeper-postpublish --save-dev', function (err, stdout, stderr) {\n    clearInterval(spin)\n    if (err) {\n      log.error('postpublish', 'Failed to install greenkeeper-postpublish', err)\n      process.exit(1)\n    }\n    log.info('postpublish', 'greenkeeper-postpublish installed and added as devDependency')\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/evilhackerdude.js":"var open = require('opener')\n\nmodule.exports = function (flags) {\n  console.log('We have content addressed you!')\n  open('https://www.youtube.com/watch?v=TrcT7sseLZI')\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/faq.js":"var log = require('npmlog')\nvar open = require('opener')\n\nmodule.exports = function (flags) {\n  log.verbose('faq', 'starting command')\n  log.info('faq', 'Opening FAQ website')\n\n  open('https://greenkeeper.io/faq.html')\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/info.js":"var chalk = require('chalk')\nvar log = require('npmlog')\nvar request = require('request')\nvar moment = require('moment')\n\nvar story = require('./lib/story').info\n\nmodule.exports = function (flags) {\n  log.verbose('info', 'Starting command')\n\n  if (!flags.token) {\n    log.error('info', story.error_login_first)\n    process.exit(1)\n  }\n\n  if (flags.slug) return infoCommand(null, flags.slug)\n\n  require('github-slug')(process.cwd(), infoCommand)\n\n  function infoCommand (err, slug) {\n    if (err || !slug) {\n      log.error('disable', 'Couldn\\'t find a remote GitHub repository in this folder.\\nTry passing the slug explicitly ' + chalk.yellow('greenkeeper enable --slug <user>/<repository>'))\n      process.exit(1)\n    }\n\n    log.info('info', 'The GitHub slug is:', slug)\n\n    log.http('info', 'Sending request')\n    request({\n      method: 'GET',\n      url: flags.api + 'packages/' + slug + '?include_branches=true',\n      json: true,\n      headers: {\n        Authorization: 'Bearer ' + flags.token\n      }\n    }, function (err, res, data) {\n      if (err) {\n        log.error('info', err.message)\n        process.exit(2)\n      }\n\n      if (data.disabled) {\n        log.error('info', 'greenkeeper isn’t enabled for this repository')\n        process.exit(1)\n      }\n\n      if (data.statusCode === 400) {\n        log.error('info', 'Couldn’t find a repository with this slug.')\n        log.error('info', 'The repository has to exist on GitHub and it has to be public,')\n        log.error('info', 'or you have to have to have a private plan. To verify run ' + chalk.yellow('greenkeeper whoami'))\n        log.error('info', 'If you have just recently created this repository try running ' + chalk.yellow('greenkeeper sync'))\n        log.error('info', 'You need admin access to enable repositories.')\n        log.error('info', 'If you think this error really shouldn’t appear let us look into it with ' + chalk.yellow('greenkeeper support'))\n        process.exit(1)\n      }\n\n      if (data.statusCode === 409) {\n        log.error('info', 'Conflict! We appear to have this repository in our system several times\\nThis can happen if you have moved or recreated the repository\\nWe can fix this though, please contact us at ' + chalk.yellow('greenkeeper support'))\n        process.exit(1)\n      }\n\n      if (data.error) {\n        log.error('info', data.error)\n        process.exit(2)\n      }\n\n      console.log('greenkeeper is enabled for this repository')\n      var prs = data.branches\n        .filter(function (branch) {\n          return branch.pr && branch.pr.state === 'open'\n        })\n      if (prs.length > 0) console.log('Open pull requests: ')\n      prs.forEach(function (branch) {\n        console.log('- ' + chalk.green('#' + branch.pr.number) + ' ' + branch.dependency + '@' + branch.version + ' ' + chalk.grey(moment(branch.created_at).fromNow()))\n      })\n      if (prs.length > 0) console.log('Older pull requests might not be shown.')\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/lewis.js":"var woerter = [\n  'WAAAT?',\n  'VOLL!',\n  'JA!',\n  'wunderbar',\n  'genau',\n  'wie bitte?',\n  'nochmal',\n  'zusammen oder getrennt?',\n  'entschlüdigung',\n  'SCHMETTERLING!!!'\n]\n\nmodule.exports = function (flags) {\n  console.log(woerter[Math.floor(Math.random() * woerter.length)])\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/list.js":"var _ = require('lodash')\nvar chalk = require('chalk')\nvar log = require('npmlog')\nvar request = require('request')\n\nmodule.exports = function (flags) {\n  log.verbose('list', 'starting command')\n\n  if (!flags.token) {\n    log.error('list', 'Login required. Run ' + chalk.yellow('greenkeeper login'))\n    process.exit(1)\n  }\n\n  log.http('list', 'Sending request')\n  request({\n    url: flags.api + 'packages',\n    json: true,\n    headers: {\n      Authorization: 'Bearer ' + flags.token\n    }\n  }, function (err, res, data) {\n    if (err) {\n      log.error('list', err.message)\n      process.exit(2)\n    }\n\n    if (!data.packages) {\n      log.error('list', res.statusMessage + (res.body.message ? ': ' + res.body.message : ''))\n      process.exit(2)\n    }\n\n    if (!data.packages.length) {\n      log.error('list', 'No repositories enabled yet')\n    }\n    _.orderBy(data.all, ['is_enabler', 'name'], ['desc', 'asc'])\n    .forEach(function (repo) {\n      if (!repo.enabled) return\n      console.log(repo.name, repo.is_enabler ? chalk.green('(enabled by you)') : '')\n    })\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/login.js":"var qs = require('querystring')\n\nvar chalk = require('chalk')\nvar log = require('npmlog')\nvar nerfDart = require('nerf-dart')\nvar open = require('opener')\nvar randomString = require('random-string')\nvar _ = require('lodash')\n\nvar getToken = require('./lib/get-token')\nvar rc = require('@greenkeeper/flags')._rc\nvar story = require('./lib/story').login\nvar logo = require('./lib/logo')\nvar sync = require('./lib/sync')\nvar checkEnterprise = require('./lib/check-enterprise.js')\n\nmodule.exports = function (flags) {\n  logo()\n  log.verbose('login', 'starting command')\n\n  if (flags.token && !flags.force) {\n    log.error('login', story.error_already_logged_in)\n    process.exit(1)\n  }\n\n  var id = randomString({length: 32})\n  log.verbose('login', 'id', id)\n\n  log.verbose('login', 'Getting token from API and opening GitHub login')\n\n  getToken(flags, id, function (data) {\n    if (data.disallowedSignup) {\n      log.info('login', 'Signing up for the old Greenkeeper oAuth application is no longer supported.')\n      log.info('login', 'The new GitHub Integration was opened instead.')\n      return\n    }\n\n    rc.set('api', flags.api)\n    rc.set(nerfDart(flags.api) + 'token', data.token)\n    rc.set(nerfDart(flags.api) + 'admin', flags.admin)\n\n    log.info('login', 'That was successful, now syncing all your GitHub repositories')\n    flags.token = data.token\n    sync(flags, function (err, repos) {\n      if (err) {\n        log.error('login', err.message)\n        process.exit(2)\n      }\n      log.info('login', 'Done syncing ' + repos.length + ' repositories')\n      console.log('You are now logged in, synced and all set up!')\n      log.info('login', 'Find out how to get started with', '' + chalk.yellow('greenkeeper start'))\n    })\n  })\n\n  if (!flags['private'] && !_.has(flags, 'private')) {\n    return checkEnterprise(function (err, flags, isEnterprise) {\n      if (err) {\n        log.error('login', err.message)\n        process.exit(2)\n      }\n      openAuth(isEnterprise)\n    })(flags)\n  }\n\n  openAuth(flags['private'])\n\n  function openAuth (pvt) {\n    var query = {\n      id: id,\n      private: pvt\n    }\n\n    if (flags.admin === false) {\n      query.no_admin = true\n      query.access_token = flags.token\n    }\n\n    var url = flags.api + 'login?' + qs.encode(query)\n\n    log.verbose('login', 'Open ' + url)\n    open(url, function (err, stdout, stderr) {\n      if (err) {\n        console.log('Login from this URL:', url)\n      }\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/lib/get-token.js":"var request = require('request')\nvar log = require('npmlog')\n\nvar story = require('./story').login\n\nmodule.exports = function getToken (flags, id, callback) {\n  request({\n    method: 'POST',\n    json: true,\n    url: flags.api + 'tokens',\n    timeout: 1000 * 60 * 60, // wait 1h\n    body: {\n      id: id\n    }\n  }, function (err, res, data) {\n    if (err) {\n      log.error('login', story.request_failed)\n      process.exit(2)\n    }\n\n    if (res.statusCode >= 502 && res.statusCode <= 504) {\n      log.verbose('login', 'Oops, that took too long. retrying...')\n      return setTimeout(getToken.bind(null, flags, id, callback), 1000)\n    }\n\n    if (res.statusCode !== 200) {\n      log.error('login', story.login_failed)\n      process.exit(1)\n    }\n\n    callback(data)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/lib/check-enterprise.js":"var request = require('request')\n\nmodule.exports = function (callback) {\n  return function (flags) {\n    if (flags.api === 'https://api.greenkeeper.io/') return callback(null, flags, false)\n    request({\n      method: 'GET',\n      json: true,\n      url: flags.api\n    }, function (err, res, data) {\n      if (err) return callback(err, flags)\n      if (res.statusCode !== 200) return callback(new Error(res.statusCode), flags)\n      callback(null, flags, data.environment === 'enterprise')\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/logout.js":"var log = require('npmlog')\nvar nerfDart = require('nerf-dart')\nvar request = require('request')\n\nvar rc = require('@greenkeeper/flags')._rc\nvar story = require('./lib/story').logout\n\nmodule.exports = function (flags) {\n  log.verbose('logout', 'starting command')\n\n  if (!flags.token) {\n    log.error('logout', story.error_already_logged_out)\n    process.exit(1)\n  }\n\n  log.http('logout', 'Sending request')\n  request({\n    method: 'DELETE',\n    json: true,\n    url: flags.api + 'tokens',\n    headers: {\n      Authorization: 'Bearer ' + flags.token\n    }\n  }, function (err, res, data) {\n    if (err) {\n      log.error('logout', err.message)\n      process.exit(2)\n    }\n\n    if (data.ok) {\n      rc.unset('token')\n      rc.unset(nerfDart(flags.api) + 'token')\n      return console.log(story.logged_out)\n    }\n\n    log.error('logout', res.statusMessage + (res.body.message ? ': ' + res.body.message : ''))\n    process.exit(2)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/npm-verify.js":"var fs = require('fs')\nvar path = require('path')\n\nvar _ = require('lodash')\nvar chalk = require('chalk')\nvar emoji = require('node-emoji')\nvar log = require('npmlog')\nvar request = require('request')\n\nmodule.exports = function (flags) {\n  var pkg\n  try {\n    pkg = JSON.parse(fs.readFileSync(path.join(process.cwd(), 'package.json')))\n  } catch (e) {\n    log.error('npm-verify', 'No package.json in this project')\n    process.exit(1)\n  }\n\n  var dependencies = Object.keys(_.assign(\n    {},\n    pkg.dependencies,\n    pkg.devDependencies,\n    pkg.optionalDependencies\n  ))\n\n  var scoped = dependencies.filter(function (dependency) {\n    return dependency[0] === '@'\n  })\n\n  if (scoped.length === 0) {\n    log.info('npm-verify', 'No scoped packages.')\n    process.exit()\n  }\n\n  request({\n    method: 'POST',\n    url: flags.api + 'npm/verify',\n    json: true,\n    headers: {\n      Authorization: 'Bearer ' + flags.token\n    },\n    body: {\n      dependencies: scoped,\n      organization: flags.organization\n    }\n  }, function (err, res, results) {\n    if (err) {\n      log.error('npm-verify', err)\n      process.exit(2)\n    }\n    var failed = _.some(results.dependencies, ['valid', false])\n    if (failed) log.info('npm-verify', 'You might need to run ' + chalk.yellow('greenkeeper npm-access'))\n    results.dependencies.forEach(function (dep) {\n      console.log('   ', chalk.bold(dep.name), dep.valid\n        ? process.platform === 'darwin' ? emoji.get('white_check_mark') : chalk.green('accessible')\n        : process.platform === 'darwin' ? emoji.get('x') : chalk.red('inaccessible')\n      )\n    })\n    process.exit()\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/organization-access.js":"var log = require('npmlog')\nvar open = require('opener')\n\nvar story = require('./lib/story')['organization-access']\n\nmodule.exports = function (flags) {\n  log.verbose('organization-access', 'starting command')\n\n  if (!flags.token) {\n    log.info('organization-access', 'Not logged in.')\n    process.exit(1)\n  }\n\n  story.forEach(function (message) {\n    log.info('organization-access', message)\n  })\n  var url = flags.api + 'login/organization-access'\n  log.verbose('organization-access', 'Open ' + url)\n  open(url)\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/signup.js":"var open = require('opener')\nvar log = require('npmlog')\n\nmodule.exports = function (flags) {\n  log.verbose('signup', 'starting command')\n\n  log.info('signup', 'Signing up for the old Greenkeeper oAuth application is no longer supported.')\n  log.info('signup', 'Opening the new GitHub Integration instead.')\n\n  open('https://git.io/uptodate')\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/start.js":"var story = require('./lib/story').start\n\nmodule.exports = function (flags) {\n  process.stdout.write(story())\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/support.js":"var log = require('npmlog')\nvar open = require('opener')\n\nmodule.exports = function (flags) {\n  log.verbose('support', 'starting command')\n\n  if (!flags.token) {\n    log.info('support', 'Not logged in. Opening GitHub issues.')\n    open('https://github.com/greenkeeperio/greenkeeper')\n    process.exit(1)\n  }\n\n  log.info('support', 'Opening GitHub issues (free plan) or Intercom')\n\n  open(flags.api + 'support?access_token=' + flags.token)\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/sync.js":"var log = require('npmlog')\n\nvar story = require('./lib/story').sync\nvar sync = require('./lib/sync')\n\nmodule.exports = function (flags) {\n  log.verbose('sync', 'starting command')\n\n  if (!flags.token) {\n    log.error('sync', story.error_no_login_first)\n    process.exit(1)\n  }\n\n  log.http('sync', 'Sending request')\n  log.info('sync', 'This might take a while')\n  sync(flags, function (err, repos) {\n    if (err) {\n      log.error('sync', err.message)\n      process.exit(2)\n    }\n    console.log(repos.sort().join('\\n'))\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/upgrade.js":"var _ = require('lodash')\nvar chalk = require('chalk')\nvar log = require('npmlog')\nvar open = require('opener')\nvar request = require('request')\nvar querystring = require('querystring')\nvar randomString = require('random-string')\n\nvar getToken = require('./lib/get-token')\nvar checkEnterprise = require('./lib/check-enterprise')\nvar rc = require('@greenkeeper/flags')._rc\n\nmodule.exports = checkEnterprise(function (err, flags, isEnterprise) {\n  log.verbose('upgrade', 'starting command')\n\n  if (err) {\n    log.error('logout', err.message)\n    process.exit(2)\n  }\n\n  if (isEnterprise) {\n    log.info('upgrade', 'You are already subscribed to Greenkeeper Enterprise.')\n    process.exit(0)\n  }\n\n  if (!flags.token) {\n    log.error('upgrade', 'Please log in first.')\n    process.exit(1)\n  }\n\n  var loginId = randomString({length: 32})\n  var id = randomString({length: 32})\n\n  var argv = flags.argv\n\n  if (!argv.remain) {\n    return usage()\n  }\n\n  var plan = argv.remain.shift()\n\n  if (!_.includes(['supporter', 'personal', 'organization'], plan)) {\n    log.error('Please specify a plan')\n    return usage()\n  }\n\n  var planType = argv.remain.shift()\n  var org = argv.remain.shift()\n\n  if (plan === 'organization') {\n    // require 25 or 50 option\n    if (!_.includes(['25', '50'], planType)) {\n      log.error('Please specify an organization plan type (25/50)')\n      return usage()\n    }\n\n    plan += '-' + planType\n\n    if (!org) {\n      log.error('Please specify an organization name')\n      return usage()\n    }\n  }\n\n  getToken(flags, loginId, function (data) {\n    rc.set('token', data.token)\n\n    var url = flags.api + 'payment' + '/' + plan\n\n    url += '?' + querystring.stringify({\n      access_token: data.token,\n      id: id\n    })\n\n    getPayment(flags, id, data.token, org, function () {\n      console.log('Payment Successful! Team greenkeeper says thank you! <3')\n      console.log('Stephan, Christoph, Alex, Gregor, Jan & Ola')\n    })\n\n    log.verbose('upgrade', 'Opening url ' + url)\n    setTimeout(open, 1000, url)\n  })\n\n  var url = flags.api + 'login?id=' + loginId + '&private=true'\n\n  log.verbose('upgrade', 'Opening url ' + url)\n  open(url)\n})\n\nfunction getPayment (flags, id, token, org, callback) {\n  request({\n    method: 'POST',\n    json: true,\n    url: flags.api + 'payment',\n    timeout: 1000 * 60 * 60, // wait 1h\n    body: {\n      id: id,\n      organization: org\n    },\n    headers: {\n      Authorization: 'Bearer ' + token\n    }\n  }, function (err, res, data) {\n    if (err) {\n      log.error('login', 'Payment failed', err.message)\n      process.exit(2)\n    }\n\n    if (res.statusCode >= 502 && res.statusCode <= 504) {\n      log.verbose('upgrade', 'Oops, that took too long. retrying...')\n      return setTimeout(getPayment.bind(null, flags, id, token, org, callback), 1000)\n    }\n\n    if (!(res.statusCode === 200 && data.ok)) {\n      log.error('login', 'Payment failed')\n      process.exit(1)\n    }\n\n    callback(data)\n  })\n}\n\nfunction usage () {\n  console.log([\n    '',\n    '  Please use one of these commands:',\n    '',\n    '      For  $5/month, fast queue, public repositories: ' + chalk.yellow('greenkeeper upgrade supporter'),\n    '      For $14/month, faster queue,  all repositories: ' + chalk.yellow('greenkeeper upgrade personal'),\n    '      For $50/month, fastest queue,  25 repositories: ' + chalk.yellow('greenkeeper upgrade organization 25 <your-org-name>'),\n    '      For $90/month, fastest queue,  50 repositories: ' + chalk.yellow('greenkeeper upgrade organization 50 <your-org-name>'),\n    '',\n    '  If you need more repositories, emails us at support@greenkeeper.io',\n    '',\n    '  Try risk-free: If you’re not satisfied and cancel your account within',\n    '  the first 30 days, we can refund your money – no questions asked. After',\n    '  that, you can always cancel to the end of each running month.',\n    '',\n    '  If you would like to talk to a human, type `greenkeeper support`',\n    ''\n  ].join('\\n'))\n  process.exit(1)\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/web-app.js":"var open = require('opener')\nvar rc = require('@greenkeeper/flags')._rc\n\nmodule.exports = function (flags) {\n  var url = 'https://app.greenkeeper.io'\n  open(url, function (err) {\n    if (err) return console.log('Open this URL:', url)\n    rc.set('web_interface_beta_banner', 11)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/whoami.js":"var chalk = require('chalk')\nvar log = require('npmlog')\nvar request = require('request')\n\nvar story = require('./lib/story').whoami\n\nmodule.exports = function (flags) {\n  log.verbose('whoami', 'starting command')\n\n  if (!flags.token) {\n    log.error('whoami', 'Login required. Run ' + chalk.yellow('greenkeeper login'))\n    process.exit(1)\n  }\n\n  log.info('whoami', 'If you’re missing organizations run ' + chalk.yellow('greenkeeper access'))\n\n  log.http('whoami', 'Sending request')\n  request({\n    url: flags.api + 'whoami',\n    json: true,\n    headers: {\n      Authorization: 'Bearer ' + flags.token\n    }\n  }, function (err, res, data) {\n    if (err) {\n      log.error('whoami', err.message)\n      process.exit(2)\n    }\n\n    if (!data.name) {\n      log.error('whoami', res.statusMessage + (res.body.message ? ': ' + res.body.message : ''))\n      process.exit(2)\n    }\n\n    console.log(story.name(data))\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/npm-access/dialog.js":"var url = require('url')\n\nvar _ = require('lodash')\nvar inquirer = require('inquirer')\nvar log = require('npmlog')\nvar RegistryClient = require('npm-registry-client')\nvar validator = require('validator')\n\nvar client = new RegistryClient({log: log})\n\nvar cache = {}\n\nmodule.exports = function self (cb) {\n  startDialog(function (nope, answers) {\n    getToken(answers, function (err, token) {\n      if (err) {\n        log.error('npm-access', 'Login failed, please try again.')\n        log.error('npm-access', err.message)\n        return self(cb)\n      }\n      cb(null, token)\n    })\n  })\n}\n\nfunction getToken (answers, cb) {\n  var registry = 'https://registry.npmjs.org/'\n  var username = answers.username\n  var password = answers.password\n\n  // Manual request to avoid account creation.\n  // This should be supported by npm-registry-client: https://github.com/npm/npm-registry-client/issues/135\n\n  var userobj = {\n    _id: 'org.couchdb.user:' + username,\n    name: username,\n    password: password,\n    type: 'user',\n    roles: [],\n    date: new Date().toISOString()\n  }\n\n  var uri = url.resolve(registry, '-/user/org.couchdb.user:' + encodeURIComponent(username))\n  var options = {\n    method: 'PUT',\n    body: userobj\n  }\n  client.request(uri, options, function (error, data, json, response) {\n    if (error) {\n      if (error.statusCode === 401) error.message = 'Your password seems to be wrong.'\n      if (error.statusCode === 400) error.message = 'You probably mistyped your username'\n      return cb(error)\n    }\n    if (!data.token) return cb(new Error('No token returned.'))\n\n    cb(null, data.token)\n  })\n}\n\nfunction startDialog (cb) {\n  inquirer.prompt([{\n    type: 'input',\n    name: 'username',\n    message: 'npm username',\n    default: cache.username,\n    validate: _.ary(_.partial(validator.isLength, _, 1), 1)\n  }, {\n    type: 'password',\n    name: 'password',\n    message: 'npm password',\n    validate: _.ary(_.partial(validator.isLength, _, 1), 1)\n  }]).then(function (answers) {\n    cache = answers\n\n    cb(null, answers)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-greenkeeper/node_modules/greenkeeper/src/npm-access/index.js":"var chalk = require('chalk')\nvar log = require('npmlog')\nvar request = require('request')\n\nvar dialog = require('./dialog')\n\nmodule.exports = function (flags) {\n  log.verbose('npm-access', 'starting command')\n\n  if (!flags.token) {\n    log.error('npm-access', 'Login required. Run ' + chalk.yellow('greenkeeper login'))\n    process.exit(1)\n  }\n\n  log.info('npm-access', 'Your machine will talk directly to the npm registry to generate an npm token.\\nYour npm password is not sent to Greenkeeper servers.')\n\n  if (!flags.organization) {\n    log.info('npm-access', 'If you want to grant access for an organization run ' + chalk.yellow('greenkeeper npm-access --organization=<name>'))\n  }\n\n  log.silly('npm-access', 'starting dialog')\n  dialog(function (err, token) {\n    if (err) {\n      log.error('npm-access', 'Failed to get token from user.')\n      process.exit(1)\n    }\n\n    log.http('npm-access', 'Sending request')\n    request({\n      method: 'POST',\n      url: flags.api + 'npm',\n      json: true,\n      headers: {\n        Authorization: 'Bearer ' + flags.token\n      },\n      body: {\n        token: token,\n        organization: flags.organization\n      }\n    }, function (err, res, data) {\n      if (err) {\n        log.error('npm-access', err.message)\n        process.exit(2)\n      }\n\n      if (!data.username) {\n        log.error('npm-access', res.statusMessage + (res.body.message ? ': ' + res.body.message : ''))\n        process.exit(2)\n      }\n\n      console.log('Authenticated with npm. Token was successfully uploaded.')\n    })\n  })\n}\n"}